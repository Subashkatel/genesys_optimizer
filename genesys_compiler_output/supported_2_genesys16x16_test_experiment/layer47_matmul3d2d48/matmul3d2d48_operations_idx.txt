// CODELET:	matmul3d2d48
inputs=data['B', 'M', 'N'], weight['N', 'P']
intermediates=
outputs=out['B', 'M', 'P']
0	config0: start-systolic_array
1	config1: start-WBUF
2	config2: start-IBUF
3	config3: start-OBUF
4	(B)loop0[0]: START=0; STOP=1; STRIDE=1; OFFSET:0
5		(N)loop1[1]: START=0; STOP=128; STRIDE=128; OFFSET:0
6			(M)loop2[2]: START=0; STOP=128; STRIDE=128; OFFSET:0
7				transfer0: OPERAND: data[DRAM->IBUF], SIZES: [[1, 128, 128], [1, 128, 128]]
8				(P)loop3[3]: START=0; STOP=512; STRIDE=256; OFFSET:0
9					transfer2: OPERAND: out[DRAM->OBUF], SIZES: [[1, 128, 512], [1, 128, 256]]
10					transfer1: OPERAND: weight[DRAM->WBUF], SIZES: [[128, 512], [128, 256]]
11					(B)loop4[4]: START=0; STOP=1; STRIDE=1; OFFSET:0
12						(N)loop5[5]: START=0; STOP=128; STRIDE=1; OFFSET:0
13							(M)loop6[6]: START=0; STOP=128; STRIDE=1; OFFSET:0
14								(P)loop7[7]: START=0; STOP=256; STRIDE=1; OFFSET:0
15									compute0: pe_array-MVMUL(['data', 'weight', 'out'])->['out']
16								loop7: END
17							loop6: END
18						loop5: END
19					loop4: END
20					transfer3: OPERAND: out[OBUF->DRAM], SIZES: [[1, 128, 256], [1, 128, 512]]
21				loop3: END
22			loop2: END
23		loop1: END
24	loop0: END
25	config4: end-WBUF
26	config5: end-IBUF
27	config6: end-OBUF
28	config7: end-systolic_array
